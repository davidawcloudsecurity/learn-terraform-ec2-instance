# This is a basic workflow to help you get started with Actions
name: learn-terraform-ec2-instance-apply

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Apply or destroy'
        required: true
        default: 'apply'
      destroy-backend:
        description: 'Also delete S3/DynamoDB backend (dangerous!)'
        required: false
        default: 'false'        

env: 
  AWS_REGION : "us-east-1" #Change to reflect your Region

# Permission can be added at job level or workflow level    
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
jobs:
  bootstrap-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::762595429056:role/GithubActions #change to reflect your IAM roleâ€™s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Create S3 Bucket
        run: |
          # S3 Bucket
          if ! aws s3api head-bucket --bucket learn-terraform-ec2-instance-terraform-state 2>/dev/null; then
            aws s3api create-bucket --bucket learn-terraform-ec2-instance-terraform-state --region $AWS_REGION
          else
            echo "S3 bucket already exists"
          fi
      - name: Create DynamoDB Table
        run: |
          if ! aws dynamodb describe-table --table-name terraform-locks >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name terraform-locks \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          else
            echo "DynamoDB table terraform-locks already exists"
          fi
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        
      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Validate
        run: terraform validate
        
      - name: Terraform Plan
        run: |
          terraform plan

      - name: Terraform Apply or Destroy
        run: |
          set -e  # fail on any error
      
          ACTION="${{ github.event.inputs.action }}"
          DESTROY_BACKEND="${{ github.event.inputs.destroy-backend }}"
      
          if [[ "$ACTION" == "destroy" ]]; then
            echo "Destroying main infrastructure..."
            terraform destroy -auto-approve
      
            if [[ "$DESTROY_BACKEND" == "true" ]]; then
              echo "Deleting backend S3 bucket and DynamoDB table..."
              # Delete all object versions and delete markers
              aws s3api delete-objects \
                --bucket learn-terraform-ec2-instance-terraform-state \
                --delete "$(aws s3api list-object-versions \
                  --bucket learn-terraform-ec2-instance-terraform-state \
                  --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}}' \
                  --max-items 1000)"
              
              # Delete all delete markers
              aws s3api delete-objects \
                --bucket learn-terraform-ec2-instance-terraform-state \
                --delete "$(aws s3api list-object-versions \
                  --bucket learn-terraform-ec2-instance-terraform-state \
                  --query '{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' \
                  --max-items 1000)"              
              aws s3 rb s3://learn-terraform-ec2-instance-terraform-state --force
              aws dynamodb delete-table --table-name terraform-locks
            fi
      
          else
            echo "Applying infrastructure..."
            terraform apply -auto-approve
          fi

      - name: Terraform Destroy on Failure
        if: failure()
    run: |
          echo "Deleting backend S3 bucket and DynamoDB table..."
          # Delete all object versions and delete markers
          aws s3api delete-objects \
            --bucket learn-terraform-ec2-instance-terraform-state \
            --delete "$(aws s3api list-object-versions \
              --bucket learn-terraform-ec2-instance-terraform-state \
              --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}}' \
              --max-items 1000)"
          
          # Delete all delete markers
          aws s3api delete-objects \
            --bucket learn-terraform-ec2-instance-terraform-state \
            --delete "$(aws s3api list-object-versions \
              --bucket learn-terraform-ec2-instance-terraform-state \
              --query '{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' \
              --max-items 1000)"              
          aws s3 rb s3://learn-terraform-ec2-instance-terraform-state --force
          aws dynamodb delete-table --table-name terraform-locks     
          terraform destroy -auto-approve -input=false
          echo "Check if AmazonSSMManagedInstanceRole exist"
          if [ -n "$(aws iam list-roles --query 'Roles[*].RoleName' | grep AmazonSSMManagedInstanceRole | sed 's/[",]//g')" ]; then
            aws iam delete-role --role-name $(aws iam list-roles --query 'Roles[*].RoleName' | grep AmazonSSMManagedInstanceRole | sed 's/[",]//g')
          fi
          echo "Check if AmazonSSMManagedInstanceProfile exist"
          if [ -n "$(aws iam list-instance-profiles --query InstanceProfiles[*].InstanceProfileName | grep AmazonSSMManagedInstanceProfile | sed 's/[",]//g')" ]; then
            aws iam delete-instance-profile --instance-profile-name $(aws iam list-instance-profiles --query InstanceProfiles[*].InstanceProfileName | grep AmazonSSMManagedInstanceProfile | sed 's/[",]//g')
          fi          
