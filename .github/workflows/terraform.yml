# This is a basic workflow to help you get started with Actions
name: learn-terraform-ec2-instance-apply

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Apply or destroy'
        required: true
        default: 'apply'

env:
  
  AWS_REGION : "us-east-1" #Change to reflect your Region

# Permission can be added at job level or workflow level    
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
jobs:
  bootstrap-backend:
    if: github.event.inputs.action == 'apply'  # Only bootstrap on apply
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::762595429056:role/GithubActions #change to reflect your IAM roleâ€™s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Create S3 Bucket
        run: |
          aws s3api create-bucket --bucket my-terraform-state --region us-east-1 || echo "Bucket exists"
          aws s3api put-bucket-versioning --bucket my-terraform-state --versioning-configuration Status=Enabled
      - name: Create DynamoDB Table
        run: |
          aws dynamodb describe-table --table-name terraform-locks || \
          aws dynamodb create-table \
            --table-name terraform-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST         
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        
      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Validate
        run: terraform validate
        
      - name: Terraform Plan
        run: |
          terraform plan

      - name: Terraform Apply or Destroy
        run: |
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terraform destroy -auto-approve
          else
            terraform apply -auto-approve tfplan
          fi   

      - name: Git Config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/davidawcloudsecurity/learn-terraform-ec2-instance.git                   
          # Get the latest commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)          
          
          # Fetch the latest changes from the remote 'destroy/main' branch
          git status
          git stash          
          echo "git fetch"
          git fetch origin destroy/main
          git add main.tf
          git commit -m "random-${COMMIT_HASH}"
          cp main.tf main.tf.origin
          echo "git checkout"
          git checkout destroy/main
          echo "git merge"
          git merge origin/destroy/main
          mv main.tf.origin main.tf
          if [ -f terraform.tfstate ]; then
            mv terraform.tfstate state/
            git add state
          fi
          git add main.tf
          git commit -m "random-${COMMIT_HASH}"
          # Push the changes to the 'destroy/main' branch
          git push origin destroy/main

      - name: Terraform Destroy on Failure
        if: failure()
        run: |
          terraform destroy -auto-approve -input=false
          echo "Check if AmazonSSMManagedInstanceRole exist"
          if [ -n "$(aws iam list-roles --query 'Roles[*].RoleName' | grep AmazonSSMManagedInstanceRole | sed 's/[",]//g')" ]; then
            aws iam delete-role --role-name $(aws iam list-roles --query 'Roles[*].RoleName' | grep AmazonSSMManagedInstanceRole | sed 's/[",]//g')
          fi
          echo "Check if AmazonSSMManagedInstanceProfile exist"
          if [ -n "$(aws iam list-instance-profiles --query InstanceProfiles[*].InstanceProfileName | grep AmazonSSMManagedInstanceProfile | sed 's/[",]//g')" ]; then
            aws iam delete-instance-profile --instance-profile-name $(aws iam list-instance-profiles --query InstanceProfiles[*].InstanceProfileName | grep AmazonSSMManagedInstanceProfile | sed 's/[",]//g')
          fi          
